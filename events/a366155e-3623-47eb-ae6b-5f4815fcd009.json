{
  "url": "https://frab.riat.at/en/36C3/public/schedule/events/188.html",
  "id": 4388,
  "guid": "a366155e-3623-47eb-ae6b-5f4815fcd009",
  "logo": null,
  "date": "2019-12-27T18:00:00+01:00",
  "start": "18:00",
  "duration": "01:30",
  "room": "CDC - Workshop area",
  "slug": "36C3-188-hacking_around_z-wave_smart_home_protocol",
  "title": "Hacking around Z-Wave smart home protocol",
  "subtitle": "",
  "track": "Workshop",
  "type": "workshop",
  "language": "en",
  "abstract": "Hacking around Z-Wave smart home gateway based on Raspberry Pi and making your own Z-Wave device based on Z-Uno.\r\n\r\nPlease take with you\r\n<ul>\r\n<li> Your laptop with</li>\r\n  <ul>\r\n    <li>Access to the internet</li>\r\n    <li>Arduino IDE installed</li>\r\n    <li>Z-Uno package installed in Arduino IDE (see https://z-uno.z-wave.me/install for details - we will help you with this during the workshop)</li>\r\n  </ul>\r\n<li>Your Raspberry Pi 3/4 with Raspbian Stretch (optional)</li>\r\n<li>Arduino compatible sensors to build your own Z-Wave sensor (optional)</li>\r\n<li>Your Z-Wave stuff if any (optional)</li>\r\n</ul>",
  "description": "<h2>Workshop sections</h2>\r\n<ul>\r\n<li>What is Z-Wave and where should you use it</li>\r\n<li>Z-Way controller and RaZberry/UZB hardware</li>\r\n <ul>\r\n  <li>Controlling switches </li>\r\n  <li>Reading sensor/switch values</li>\r\n  <li>Making rules</li>\r\n  <li>Using JS API</li>\r\n </ul>\r\n<li>Z-Uno prototyping board</li>\r\n <ul>\r\n  <li>Making Simple Switch</li>\r\n  <li>Adding more stuff</li>\r\n </ul>\r\n<li>Z-Uno Shield and Z-Uno Configurator</li>\r\n<li>Z-Uno Modules</li>\r\n</ul>\r\n\r\n<hr/>\r\n\r\n<h2>Usefull links for the workshop</h2>\r\n\r\n<h3>Z-Way controllers on the workshop</h3>\r\n<ul>\r\n<li>Controller (EU, 868 MHz)</li>\r\n<li>Smart Home UI http://192.168.88.22:8083</li>\r\n<li>Expert UI http://192.168.88.22:8083/expert</li>\r\n<li>WiFi SSID</li>\r\n<li>Z-Wave-RPi-xxxx / PSK: ccc-2019</li>\r\n<li>Smart Home User: admin / Password: ccc</li>\r\n</ul>\r\n\r\n<h3>Z-Way documentation</h3>\r\n<ul>\r\n<li>Installing Z-Way https://z-wave.me/z-way/download-z-way/</li>\r\n<li>Z-Way doc https://z-wave.me/essentials</li>\r\n<li>Z-Way JS engine GitHub https://github.com/Z-Wave-Me/home-automation/</li>\r\n</ul>\r\n\r\n<h3>Z-Way workshop materials</h3>\r\n<ul>\r\n<li>Making rules: Settings -> Apps -> Local -> IfThen -> Add</li>\r\n<li>Turning on/off a device /ZWaveAPI/Run/devices[NNN].SwitchBinary.Set(0 or 1)</li>\r\n<li>Reading switch value /ZWaveAPI/Run/devices[NNN].SwitchBinary.data.level.value</li>\r\n<li>Reading sensor value /ZWaveAPI/Run/devices[NNN].SensorBinary.data[12].level.value</li>\r\n<li>Using JS API /JS/Run/var v = 1; setInterval(function() { zway.devices[NNN].SwitchBinary.Set(v); v = 1-v;}, 2000);</li>\r\n</ul>\r\n\r\n<hr/>\r\n\r\n<h3>Z-Uno documentation</h3>\r\n<ul>\r\n<li>Quick Intro https://z-uno.z-wave.me/getting-started/quick-introduction-in-z-uno/</li>\r\n<li>Installation howto https://z-uno.z-wave.me/install</li>\r\n<li>Language Reference https://z-uno.z-wave.me/reference/</li>\r\n<li>Examples https://z-uno.z-wave.me/examples/</li>\r\n<li>Z-Uno Shield https://z-uno.z-wave.me/shield/</li>\r\n<li>Z-Uno Shield Configurator https://z-uno.z-wave.me/shield/configurator/</li>\r\n<li>Z-Uno GitHub https://github.com/Z-Wave-Me/Z-Uno-Core/</li>\r\n</ul>\r\n\r\n<h3>Z-Uno settings</h3>\r\nMake sure to configure in Arduino IDE:\r\n<ul>\r\n<li>File -> Preferences -> Add package source URL http://z-uno.z-wave.me/files/z-uno/package_z-wave.me_index.json</li>\r\n<li>Tools -> Board -> Board Manager -> Z-Uno 2.1.5</li>\r\n<li>Tools -> Board -> Z-Uno</li>\r\n<li>Tools -> Programmer -> Z-Uno</li>\r\n<li>Tools -> Port -> /dev/ttyACM0 or /dev/ttyACM1</li>\r\n<li>Tools -> Frequency EU/RU (depending on your controller)</li>\r\n<li>Tools -> Security none or S0 or S2 - up to you</li>\r\n</ul>\r\n\r\nYou might also need to add your user to *dialout* group to have permissions for /dev/ttyACM*\r\n\r\n<h3>Z-Uno workshop materials</h3>\r\nSketch for Simple Switch:\r\n<code><pre>\r\n ZUNO_SETUP_CHANNELS(ZUNO_SWITCH_BINARY(state, 0));\r\n \r\n byte state = 0;\r\n \r\n void setup() {\r\n   pinMode(13, OUTPUT);\r\n }\r\n \r\n void loop() {\r\n   digitalWrite(13, state ? HIGH : LOW);\r\n }\r\n</pre></code>\r\n\r\nSketch in getter/setter style:\r\n<code><pre>\r\n ZUNO_SETUP_CHANNELS(\r\n   ZUNO_SWITCH_BINARY(getter, setter),\r\n   ZUNO_SENSOR_BINARY_DOOR_WINDOW(doorGetter)\r\n );\r\n \r\n byte state = 0;\r\n byte door = 0, lastDoor = 0xff;\r\n \r\n void setup() {\r\n   pinMode(13, OUTPUT);\r\n   pinMode(18, INPUT);\r\n }\r\n \r\n void loop() {\r\n   digitalWrite(13, state ? HIGH : LOW);\r\n   \r\n   door = digitalRead(18) == LOW ? 0xff : 0;\r\n   if (door != lastDoor) zunoSendReport(2); // push update of channel 2\r\n   lastDoor = door;\r\n }\r\n \r\n void setter(byte val) {\r\n   state = val;\r\n }\r\n \r\n byte getter() {\r\n   return state;\r\n }\r\n \r\n byte doorGetter() {\r\n   return door;\r\n }\r\n</pre></code>",
  "recording_license": "The talks at Critical Decentralisation Cluster will be live streamed and recorded. I consent to the use by Monero or RIAT of my image, video, and voice. I understand that this consent is perpetual and my image, video, and voice may appear publicly as part of Monero or RIAT website, Twitter account, YouTube channel and/or other marketing materials, which will be licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. If you would like to opt-out and not be recorded, please contact office@riat.at",
  "do_not_record": false,
  "persons": [
    {
      "id": 142,
      "public_name": "PoltoS"
    }
  ],
  "links": [
    {
      "url": "z-uno.z-wave.me",
      "title": "website"
    }
  ],
  "attachments": []
}